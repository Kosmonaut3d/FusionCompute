// computeBilateralBlur.comp
// This shader computes bilateral blur for a given depth map.

#version 460 core

layout(local_size_x = 32, local_size_y = 16) in;

layout(r16ui, binding = 0) uniform readonly uimage2D rawDepthImage;
layout(r32f, binding = 1) uniform writeonly image2D depthImageBlurred;

// sig = 1
const float gaussWeightBox[5][5] = 
{{0.003765,	0.015019,	0.023792,	0.015019,	0.003765},
 {0.015019,	0.059912,	0.094907,	0.059912,	0.015019},
 {0.023792,	0.094907,	0.150342,	0.094907,	0.023792},
 {0.015019,	0.059912,	0.094907,	0.059912,	0.015019},
 {0.003765,	0.015019,	0.023792,	0.015019,	0.003765}}; 

 /* Alternative 9x9 kernel
const float gaussWeightBox_large[9][9] = { 
{0.0000,	0.0000,	0.0000,	0.0001,	0.0001,	0.0001,	0.0000,	0.0000,	0.0000 },
{0.0000,	0.0000,	0.0004,	0.0014,	0.0023,	0.0014,	0.0004,	0.0000,	0.0000 },
{0.0000,	0.0004,	0.0037,	0.0146,	0.0232,	0.0146,	0.0037,	0.0004,	0.0000 },
{0.0001,	0.0014,	0.0146,	0.0584,	0.0926,	0.0584,	0.0146,	0.0014,	0.0001 },
{0.0001,	0.0023,	0.0232,	0.0926,	0.1466,	0.0926,	0.0232,	0.0023,	0.0001 },
{0.0001,	0.0014,	0.0146,	0.0584,	0.0926,	0.0584,	0.0146,	0.0014,	0.0001 },
{0.0000,	0.0004,	0.0037,	0.0146,	0.0232,	0.0146,	0.0037,	0.0004,	0.0000 },
{0.0000,	0.0000,	0.0004,	0.0014,	0.0023,	0.0014,	0.0004,	0.0000,	0.0000 },
{0.0000,	0.0000,	0.0000,	0.0001,	0.0001,	0.0001,	0.0000,	0.0000,	0.0000 }};
*/

// Apply blur or only convert to float
uniform bool blur = true;

float g_s(float diff)
{
    // maximum range to allow blurring in cm
    const float maxClipRangeCm = 40;

    // Total range of the kinect depth sensor (approximated)
    const float maxRangeKinectCm = 400;
    const float maxRangeRelative = maxClipRangeCm / maxRangeKinectCm;

    // rel will be 1 if diff is maxRange
    float rel = diff / maxRangeRelative;
     
    // if diff > maxRangeRelative, it will be clipped here
    return max(1-rel, 0);
}

void main() {
  // pixel coordinates
  ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

  // Middle point = reference value
  float referenceValue = imageLoad(rawDepthImage, pixel_coords).r / 2048.0f;

  // Check if reference value is valid and blur is set to true
  if(blur && referenceValue > 0)
  {
      float result = referenceValue * gaussWeightBox[2][2];
      float weightSum = gaussWeightBox[2][2];

      // Gaussian blur, multiplied with spatial distance function
      // 5x5 samples - -2 ... +2
      for(int y = -2; y <=2; y++)
      {
          for(int x = -2; x <=2; x++)
          {
                // Ignore middle value, that is the reference
                if(x == 0 && y == 0)
                {
                    continue;
                }
                ivec2 samplePos = pixel_coords + ivec2(x,y);
                float compareValue = imageLoad(rawDepthImage, samplePos).r / 2048.0f;
         
                if(compareValue <= 0)
                {
                    continue;
                }

                float weight = g_s(abs(referenceValue -compareValue)) * gaussWeightBox[x+2][y+2];
                result += compareValue * weight;
                weightSum += weight;
          }
      }
  
      result /= weightSum;
  
      imageStore(depthImageBlurred, pixel_coords, result.rrrr);
  }
  else
  {
      imageStore(depthImageBlurred, pixel_coords, referenceValue.rrrr);
  }
}
