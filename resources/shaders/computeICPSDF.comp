// computeICPSDF
// This shader will compute the ICP correspondences
// Supplied by a signed distance field

#version 460 core

layout(local_size_x = 64, local_size_y = 16) in;

layout(rgba32f, binding = 0) uniform readonly coherent image2D vertex_new;
layout(rgba32f, binding = 1) uniform readonly coherent image2D normals_new;
layout(rgba32f, binding = 2) uniform writeonly coherent image2D correspondence;
uniform sampler3D signedDistanceVolumeTexture;

// output data structure
struct o_struct
{
	vec3 o_a1;
	vec3 o_a2;
	float o_b;
};

// Output data
layout(std430, binding = 0) writeonly buffer odata
{
	o_struct o_d[];
};

layout(binding = 0, offset=0) uniform atomic_uint correspondence_counter;

uniform vec3 _cameraOrigin; // origin of the camera
uniform mat4x4 _viewToWorldIt; // View To World
uniform mat3x3 _viewToWorldItRot; // View To World
uniform mat4 _sdfBaseTransform; // Transformation to SDF volume base
uniform float _truncationDistance; // \mu 
uniform float _epsilonDistance = 1; 
uniform float _epsilonNormal = .5;

// Performance characteristics for the SDF tracing
#define MAX_STEPS 50
#define MAX_DIST 8
#define SURFACE_DIST .01

// The exact distance to the actual SDF volume
// https://iquilezles.org/articles/distfunctions/
float getDistanceSDFVolume(vec3 p)
{
    const vec3 b = vec3(2, 2, 2);
    vec3 q = abs(p-vec3(0, 0, -2)) - b;
    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

// Returns the signed distance, if still inside the volume, or MAX_DIST
float getSignedDistance(vec3 p)
{
    // Transform world position to SDF Base transformation
    vec3 relPos = (_sdfBaseTransform * vec4(p, 1)).xyz; 

    // SDF base coordinates are such that values <0 or >1 are outside the field
    if(relPos.x < 0 || relPos.y < 0 || relPos.z < 0 || relPos.x > 1 || relPos.y > 1|| relPos.z > 1)
    {
        // If outside -> do not trace further
        return MAX_DIST;
    }
    
    // Trilinearly interpolated SD value
    return texture(signedDistanceVolumeTexture, relPos).r;
}

// step / march from r0 in the direction of rd.
// returns: vec2, x = distance, y = iterations/MAX_STEPS
vec2 rayMarchSDF(vec3 ro, vec3 rd) 
{
    // d0 = distance marched so far.
    float dO = 0;

    int i = 0;
    float maxDist =  _epsilonDistance * 2; //MAX_DIST;
    for(i=0;i<MAX_STEPS;i++)
    {
        // Advance the step
        vec3 p = ro + rd * dO;

        // get new TSD value
        float ds = getSignedDistance(p); 

        // Advance by ds
        dO += ds;

        // Check if we are either exceeding maximum distance or have hit something
        if(dO > (maxDist ) || ds < SURFACE_DIST) break;
    }

    // Cast to double by multiplication with 1.0
    return vec2(dO, i * 1.0 / MAX_STEPS );
}

// Calculates the normal numerically.
// Equivalent to the gradient at that point
vec3 GetNormal(vec3 p)
{ 
    float d = getSignedDistance(p); // middle sample
    vec2 e = vec2(.01,0); // Epsilon
    vec3 n = d - vec3(
    getSignedDistance(p-e.xyy),  
    getSignedDistance(p-e.yxy),
    getSignedDistance(p-e.yyx));
    return normalize(n);
}

// Starting point for this shader
void main() {
	// pixel coordinate for this thread, wll return a value 0...640, 0...480
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

    // Source vertex transformed to world space
	vec3 vertexWorldSource = (_viewToWorldIt * vec4(imageLoad(vertex_new, pixel_coords).xyz, 1)).xyz;
	if(vertexWorldSource.z == 0)
	{
		return;
	}

    // Direction of Ray
    vec3 rd = normalize(vertexWorldSource - _cameraOrigin);

    // Origin of ray
	vec3 ro =  vertexWorldSource - rd * _epsilonDistance; //

    // distance to hit
    vec2 d = rayMarchSDF(ro, rd);
    
    // correspondence point
    vec3 pos = ro + rd * d.x;
    
    // Filter by distance
	if (distance(pos, vertexWorldSource) > _epsilonDistance)
	{
		return;
	}
    
    // compare model normal and point cloud normal
    vec3 nor = GetNormal(pos);
	vec3 newNormalWorld = normalize(_viewToWorldItRot * imageLoad(normals_new, pixel_coords).xyz);

	// check epsilon_theta
	if (dot(nor, newNormalWorld) < _epsilonNormal)
	{
		return;
	}
    
    // count up the correspondences
	uint currentCount = atomicCounterIncrement(correspondence_counter);
    
    // Write a debug image
	imageStore(correspondence, pixel_coords, vec4(dot(nor,newNormalWorld).xxx, 1));

	// output, prepare for 6x6 linear system.
	vec3 s_i = vertexWorldSource;
	vec3 d_i = pos;
	vec3 n_i = nor;

	o_struct outputData;
	outputData.o_a1 = cross(s_i, n_i);
	outputData.o_a2 = n_i;
	outputData.o_b = dot(n_i, d_i) - dot(n_i, s_i);

	o_d[currentCount] = outputData;
    memoryBarrier();
}
